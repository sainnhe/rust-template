#!/usr/bin/env bash

types=('fix' 'feat' 'build' 'chore' 'ci' 'docs' 'style' 'refactor' 'perf' 'test')

# build the regex pattern based on the config file
function build_regex() {

  regexp="^[.0-9]+$|"

  regexp="${regexp}^([Rr]evert|[Mm]erge):? .*$|^("

  for type in "${types[@]}"
  do
    regexp="${regexp}$type|"
  done

  regexp="${regexp%|})(\(.+\))?!?: "
}

# get the first line of the commit message
commit_message=`head -n1 $1`

# Print out a standard error message which explains
# how the commit message should be structured
function print_error() {
  local red='\033[0;31m'
  local yellow='\033[0;33m'
  local blue='\033[0;34m'
  local nc='\033[0m' # No Color

  echo -e "${red}[ERROR] Invalid Commit Message${nc}"
  echo -e "------------------------"
  echo -e "Your commit message does not conform to the conventional commit specification."
  echo -e "Please follow the format:"
  echo -e "  ${yellow}<type>(<scope>): <subject>${nc}"
  echo -e "Valid types:"
  echo -e "  ${blue}${types[@]}${nc}"
  echo -e "Examples:"
  echo -e "  ${blue}feat(api): add new user endpoint${nc}"
  echo -e "  ${blue}fix: correct typo in documentation${nc}"
  echo -e "Reference:"
  echo -e "  ${blue}https://www.conventionalcommits.org${nc}"
  echo -e "The first line of your actual commit message is:"
  echo -e "  ${red}${commit_message}${nc}\n"
}

build_regex

if [[ ! $commit_message =~ $regexp ]]; then
  # commit message is invalid according to config - block commit
  print_error
  exit 1
fi
